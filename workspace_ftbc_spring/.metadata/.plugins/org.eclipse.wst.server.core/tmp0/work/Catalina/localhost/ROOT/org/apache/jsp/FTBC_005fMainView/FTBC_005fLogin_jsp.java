/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-10-15 03:40:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.FTBC_005fMainView;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class FTBC_005fLogin_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String preURL = request.getParameter("preURL");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>로그인 화면 </title>\r\n");
      out.write("<!--=============================================================================================\r\n");
      out.write("\t프로젝트 올리기 - 프로젝트 개요 탭\r\n");
      out.write("\t날짜:2019-09-12\r\n");
      out.write("================================================================================================  -->\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"FTBC_Login.css?lovelyz\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!--=============================================================================================\r\n");
      out.write("\t로그인 박스\r\n");
      out.write("\t날짜:2019-09-12\r\n");
      out.write("================================================================================================  -->\r\n");
      out.write("<script>\r\n");
      out.write("\tfunction join(){\r\n");
      out.write("\t\tvar url = \"../FTBC_MainView/FTBC_Join_pre.jsp\";\r\n");
      out.write("\t\t$(\"#Login_page\").load(url);\r\n");
      out.write("\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction findpw(){\r\n");
      out.write("\t\tvar url = \"../FTBC_MainView/Forgot_PW.jsp\";\r\n");
      out.write("\t\t$(\"#Login_page\").load(url);\r\n");
      out.write("\t}\r\n");
      out.write("\tfunction login(){\r\n");
      out.write("\t\talert(\"호출성공?\");\r\n");
      out.write("\t\tvar log_id = $(\"#log_id\").val();\r\n");
      out.write("\t\tvar log_pw = $(\"#log_pw\").val();\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\ttype:'GET'\r\n");
      out.write("\t\t\t,url:'/restMember/login.ftbc?log_id='+log_id+\"&log_pw=\"+log_pw\r\n");
      out.write("\t\t\t,success: function(data) {\r\n");
      out.write("\t\t\t\tconsole.log(\"data : \"+data);\r\n");
      out.write("\t\t\t\tif(data == '로그인에 성공하였습니다') {\r\n");
      out.write("\t\t\t\t\tlocation.href=\"");
      out.print(preURL );
      out.write("\";\r\n");
      out.write("\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\talert(data);\r\n");
      out.write("\t\t\t\t} \r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\t\t\t}\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("<div id=\"login_box\">\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<button id=\"log_face\">F 페이스북</button>\r\n");
      out.write("\t\t<button id=\"log_naver\">N 네이버</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"hr_one\">\r\n");
      out.write("\t\t<div class=\"line\">또 는</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<input id=\"log_id\" name=\"log_id\" type=\"text\" placeholder=\"이메일 주소 입력\"><br>\r\n");
      out.write("\t<input id=\"log_pw\" name=\"log_pw\" type=\"password\"   placeholder=\"비밀번호\" >\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<button id=\"log_login\" onclick=\"javascript: login()\">로그인</button>\r\n");
      out.write("\t</div>\t\r\n");
      out.write("\t<div id=\"log_join\">\r\n");
      out.write("\t\t<span>아직 계정이 없으신가요?  </span><a href=\"javascript:join()\">가입하기</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div>\r\n");
      out.write("\t\t<hr/>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div id=\"log_find_Password\">\r\n");
      out.write("\t\t<a href=\"javascript:findpw()\">혹시 비밀번호를 잊으셨나요?</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
