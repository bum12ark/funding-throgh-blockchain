/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-10-26 11:33:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.FTBC_005fDetailView;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.google.gson.JsonObject;
import java.util.HashMap;
import java.util.Vector;
import java.util.Map;
import java.util.List;
import com.google.gson.Gson;

public final class toJson_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.google.gson.JsonObject");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("com.google.gson.Gson");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
 
	Map<String,Object> rMap = (Map<String,Object>)request.getAttribute("pMap");
	Gson gson = new Gson();
	Map<String, List> rootMap = new HashMap<>();
	List<Map<String, Object>> colsList = new Vector<Map<String,Object>>();
	// cols
	Map<String, Object> colsMap = new HashMap<String, Object>();
	// 1
	colsMap.put("id", "");
	colsMap.put("labels", "연령대");
	colsMap.put("pattern", "");
	colsMap.put("type", "string");
	colsList.add(colsMap);
	// 2
	colsMap = new HashMap<String, Object>();
	colsMap.put("id", "");
	colsMap.put("labels", "명수");
	colsMap.put("pattern", "");
	colsMap.put("type", "number");
	colsList.add(colsMap);
	
	rootMap.put("cols", colsList);
	
	// rows
	List<Map<String, Object>> rowsList = new Vector<Map<String,Object>>();
	Map<String, Object> rowsMap = new HashMap<String, Object>();
	List<Map<String, Object>> detailRowList = new Vector<Map<String,Object>>();
	Map<String, Object> detailRowMap = new HashMap<String, Object>();
	if(Integer.parseInt(rMap.get("10대").toString())>0){
	detailRowMap.put("v", "10대");
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	detailRowMap = new HashMap<String, Object>();
	detailRowMap.put("v", rMap.get("10대"));
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	rowsMap.put("c", detailRowList);
	rowsList.add(rowsMap);
	}
	if(Integer.parseInt(rMap.get("20대").toString())>0){
	detailRowMap = new HashMap<String, Object>();
	detailRowList = new Vector<>();
	detailRowMap.put("v", "20대");
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	detailRowMap = new HashMap<String, Object>();
	detailRowMap.put("v", rMap.get("20대"));
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	rowsMap = new HashMap<>();
	rowsMap.put("c", detailRowList);
	rowsList.add(rowsMap);
	}
	if(Integer.parseInt(rMap.get("30대").toString())>0){
	detailRowMap = new HashMap<String, Object>();
	detailRowList = new Vector<>();
	detailRowMap.put("v", "30대");
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	detailRowMap = new HashMap<String, Object>();
	detailRowMap.put("v", rMap.get("30대"));
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	rowsMap = new HashMap<>();
	rowsMap.put("c", detailRowList);
	rowsList.add(rowsMap);
	}
	if(Integer.parseInt(rMap.get("40대").toString())>0){
	detailRowMap = new HashMap<String, Object>();
	detailRowList = new Vector<>();
	detailRowMap.put("v", "40대");
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	detailRowMap = new HashMap<String, Object>();
	detailRowMap.put("v", rMap.get("40대"));
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	rowsMap = new HashMap<>();
	rowsMap.put("c", detailRowList);
	rowsList.add(rowsMap);
	}
	if(Integer.parseInt(rMap.get("50대").toString())>0){
	detailRowMap = new HashMap<String, Object>();
	detailRowList = new Vector<>();
	detailRowMap.put("v", "50대");
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	detailRowMap = new HashMap<String, Object>();
	detailRowMap.put("v", rMap.get("50대"));
	detailRowMap.put("f", null);
	detailRowList.add(detailRowMap);
	rowsMap = new HashMap<>();
	rowsMap.put("c", detailRowList);
	rowsList.add(rowsMap);
	}
	
	rootMap.put("rows", rowsList);
	
	String data = gson.toJson(rootMap);
	out.print(data);

    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
