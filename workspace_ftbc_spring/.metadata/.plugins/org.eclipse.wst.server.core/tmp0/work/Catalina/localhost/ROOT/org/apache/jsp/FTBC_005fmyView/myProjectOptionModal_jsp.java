/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-11-02 07:22:41 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.FTBC_005fmyView;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;

public final class myProjectOptionModal_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	List<Map<String, Object>> getmypjogiftOption = new ArrayList<>();
	List<Map<String, Object>> gopOption = new ArrayList<>();
	if(request.getAttribute("getmypjogiftOption")!=null){
		getmypjogiftOption = (List<Map<String, Object>>)request.getAttribute("getmypjogiftOption");
		gopOption = (List<Map<String, Object>>)request.getAttribute("gopOption");
	}


      out.write("\r\n");
      out.write("\r\n");
      out.write("               <div>\r\n");
      out.write("                  ");

                     for(int j=0;j<gopOption.size();j++){
                        Map<String,Object> aMap = gopOption.get(j);
                        
      out.write("\r\n");
      out.write("                           <div>\r\n");
      out.write("                           <label style=\"font-size: 30px;\">\r\n");
      out.write("                           ");
      out.print(aMap.get("GOP_OPTION"));
      out.write("\r\n");
      out.write("                           </label>\r\n");
      out.write("                           <label style=\"font-size:25px;\">\r\n");
      out.write("                           X");
      out.print(aMap.get("GOP_AMMOUNT"));
      out.write("\r\n");
      out.write("                           </label>\r\n");
      out.write("                        ");

                        for(int i=0;i<getmypjogiftOption.size();i++){
                           Map<String,Object> pMap = getmypjogiftOption.get(i);
                           if(aMap.get("GOP_CODE").equals(pMap.get("gop_code"))){
                     
      out.write("\r\n");
      out.write("                           <br>\r\n");
      out.write("                           <label style=\"font-size: 20px;\">\r\n");
      out.write("                           &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<i class=\"eicon eicon-flickr\"></i>");
      out.print(pMap.get("god_option"));
      out.write("\r\n");
      out.write("                           </label>\r\n");
      out.write("                        \r\n");
      out.write("                     ");
      
                           }
                        }
                     
      out.write("\r\n");
      out.write("                        \r\n");
      out.write("                           </div>\r\n");
      out.write("                           <hr style=\"margin: 0px;padding: 2px;\">\r\n");
      out.write("                        ");

                     }
                  
      out.write("\r\n");
      out.write("               \r\n");
      out.write("               </div>      \r\n");
      out.write("\t\t\t\t");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
