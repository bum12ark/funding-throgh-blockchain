package file.client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.net.Socket;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

import file.path.Path;

public class FileTransfer extends JFrame implements ActionListener {
	public Socket fileSocket = null;
	public OutputStream out = null;
	public DataOutputStream dout = null;
	public FileInputStream fin = null;
	public FileClientThread fileClientThread = null;
	private JButton jbtn_sync = new JButton("동기화");
	private String loginId = null;
	public FileTransfer(String loginId) {
		this.loginId = loginId;
		initDisplay();
	}
	
	public void initDisplay() {
		jbtn_sync.addActionListener(this);
		this.add(jbtn_sync);
		this.setVisible(true);
		this.setSize(300, 300);
	}
	
	public void downloadFile() {
		String fileName ="FTBCChain.txt";
		try {
			fileSocket = new Socket(Path.SERVER_IP, Path.FILE_SERVER_PORT);
			out = fileSocket.getOutputStream();
			dout = new DataOutputStream(out);
			dout.writeUTF(Protocol.FILE_DOWNLOAD+Protocol.seperator
						+fileName);
			fileClientThread = new FileClientThread(this);
			fileClientThread.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void uploadFile() {
		try {
			fileSocket = new Socket(Path.SERVER_IP, Path.FILE_SERVER_PORT);
			out = fileSocket.getOutputStream();
			dout = new DataOutputStream(out);
			dout.writeUTF(Protocol.FILE_UPLOAD_START+"");
			String fileName = "C:\\FTBCupload\\addBlockChain.txt";
			
			fin = new FileInputStream(new File(fileName));
			byte[] buffer = new byte[1024];
			int len = 0;
			int data = 0;
			while((len = fin.read(buffer)) > 0) {
				data++;
			}
			int datas = data;
			fin.close();
			fin = new FileInputStream(fileName);
			dout.writeInt(data);
			dout.writeUTF("addBlockChain.txt");
			
			len = 0;
			for(; data>0;data--) {
				len = fin.read(buffer);
				out.write(buffer, 0, len);
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if(fileSocket != null) {
				try {
					System.out.println(fileSocket.toString()+" : 파일 업로드 chatView 소켓 종료");
					fileSocket.close();
				} catch (Exception e2) {
					e2.printStackTrace();
				}
			}
		}
	}
	private void mkDir() {
		File Folder = new File(Path.blockChainFolder);
		if(!Folder.exists()) {
			try {
				Folder.mkdir();
				JOptionPane.showMessageDialog(this, "폴더가 생성되었습니다.");
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			JOptionPane.showMessageDialog(this, "이미 폴더가 생성되어 있습니다.");
		}
	}
	private boolean isFile() {
		File blockChainFile = new File(Path.blockChainFolder"Chain.txt");
		if(!blockChainFile.isFile()) {
			JOptionPane.showMessageDialog(this, "해당 파일이 없습니다.");
			return false;
		} else {
			JOptionPane.showMessageDialog(this, "해당 파일이 있습니다.");
			return true;
		}
		
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		Object obj = e.getSource();
		if(obj == jbtn_sync) {
			// 폴더 생성
			this.mkDir();
			if(isFile()) {
				
			}
			// 파일이 없는 경우
			else {
				int result = 
						JOptionPane.showConfirmDialog(this, "블록체인 파일이 없습니다.\n체인을 다운 받으시겠습니까?"
								, "Confirm", JOptionPane.YES_NO_OPTION);
				if(result == JOptionPane.YES_OPTION) {
					// 서버의 체인 다운로드 진행
					JOptionPane.showMessageDialog(this, "네");
					this.downloadFile();
					
				} else {
					return;
				}
			}
			
		}
	}
}
