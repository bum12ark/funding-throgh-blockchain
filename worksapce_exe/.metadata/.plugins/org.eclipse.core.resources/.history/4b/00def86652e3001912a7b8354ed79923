package exe.client;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;

import exe.path.Path;
import exe.util.Protocol;

public class FileTransfer {
	FileView fileView = null;
	FileClientThread fileClientThread = null;
	Socket fileSocket = null;
	OutputStream out = null;
	DataOutputStream dout = null;
	FileInputStream fin = null;
	//
	InputStream in = null;
	DataInputStream din = null;
	//
//	ObjectInputStream ois = null;
//	ObjectOutputStream oos = null;
	//
	public FileTransfer(FileView fileView) {
		this.fileView = fileView;
		try {
			fileSocket = new Socket(Path.SERVER_IP, Path.FILE_SERVER_PORT);
			out = fileSocket.getOutputStream();
			dout = new DataOutputStream(out);
			in = fileSocket.getInputStream();
			din = new DataInputStream(in);
//			oos = new ObjectOutputStream(out);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	// 파일 업로드
	public void autoSyncChainUpload(String loginID, MsgClientThread mct) {
		try {
//			oos.writeObject(Protocol.AUTOSYNC_CHAIN_UPLOAD
//						+Protocol.seperator+loginID);
			dout.writeUTF(Protocol.AUTOSYNC_CHAIN_UPLOAD
					+Protocol.seperator+loginID);
			fin = new FileInputStream(new File(Path.CHAIN_DIRECTORY+loginID+"Chain.ftbc"));
			byte[] buffer = new byte[1024];
			int len = 0;
			int data = 0;
			while((len = fin.read(buffer)) > 0) {
				data++;
			}
			fin.close();
			fin = new FileInputStream(Path.CHAIN_DIRECTORY+loginID+"Chain.ftbc");
			dout.writeInt(data);
			len = 0;
			for(; data>0;data--) {
				len = fin.read(buffer);
				out.write(buffer, 0, len);
			}
			
			fin.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	// 체인 동기화 버튼 - 체인 업로드
	public void chainSyncUpload(String loginID) {
		try {
//			oos.writeObject(Protocol.CHAIN_SYNC_UPLOAD
//					+Protocol.seperator+loginID);
			dout.writeUTF(Protocol.CHAIN_SYNC_UPLOAD
					+Protocol.seperator+loginID);
			
			fin = new FileInputStream(new File(Path.CHAIN_DIRECTORY+loginID+"Chain.ftbc"));
			byte[] buffer = new byte[1024];
			int len = 0;
			int data = 0;
			while((len = fin.read(buffer)) > 0) {
				data++;
			}
			fin.close();
			fin = new FileInputStream(Path.CHAIN_DIRECTORY+loginID+"Chain.ftbc");
			dout.writeInt(data);
			
			len = 0;
			for(; data>0;data--) {
				len = fin.read(buffer);
				out.write(buffer, 0, len);
			}
			fin.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	// 자동 동기화 체크박스 체크 되있을 시 업로드 마지막 파일
	public void autoSyncChainUploadLast(String loginID, MsgClientThread mct) {
		try {
//			oos.writeObject(Protocol.AUTOSYNC_CHAIN_UPLOAD_END
//					+Protocol.seperator+loginID);
			dout.writeUTF(Protocol.AUTOSYNC_CHAIN_UPLOAD_END
					+Protocol.seperator+loginID);
			fin = new FileInputStream(new File(Path.CHAIN_DIRECTORY+loginID+"Chain.ftbc"));
			byte[] buffer = new byte[1024];
			int len = 0;
			int data = 0;
			while((len = fin.read(buffer)) > 0) {
				data++;
			}
			fin.close();
			fin = new FileInputStream(Path.CHAIN_DIRECTORY+loginID+"Chain.ftbc");
			dout.writeInt(data);
			
			len = 0;
			for(; data>0;data--) {
				len = fin.read(buffer);
				out.write(buffer, 0, len);
			}
//			fin.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	// 파일 다운로드
	public void chainDown(String loginID) {
		try {
//			oos.writeObject(Protocol.CHAIN_SYNC_DOWNLOAD
//					+Protocol.seperator+loginID);
			dout.writeUTF(Protocol.CHAIN_SYNC_DOWNLOAD
					+Protocol.seperator+loginID);
			///# 수정 필요
			fileClientThread = new FileClientThread(this);
			fileClientThread.start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	public void disconnect() {
		try {
//			oos.writeObject(Protocol.DISCONNECT_FILE_SOCKET
//					+Protocol.seperator+"disconnect");
			dout.writeUTF(Protocol.DISCONNECT_FILE_SOCKET
					+Protocol.seperator+"disconnect");
			if(out != null) try {out.close();}catch(Exception e) {e.printStackTrace();}
			if(fileSocket != null) try {fileSocket.close();}catch(Exception e) {e.printStackTrace();}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
